name: 'Send Slack Message'
description: 'Send Slack Message using Template for Strong'
inputs:
  slack-bot-token:
    description: 'Token for Strong Slack Bot'
    required: true
  channel-id:
    description: 'Slack Channel ID to send Message To'
    required: true
  status:
    description: 'Status of Step'
    required: true
  success-emoji:
    description: 'Emoji to send on success'
    required: false
    default: ':large_green_circle:'
  fail-emoji:
    description: 'Emoji to send on failure'
    required: false
    default: ':red_circle:'
runs:
  using: composite
  steps:
    - id: setup
      run: |
        if [[ ! ${{ inputs.status }} =~ ^(SUCCESS|FAIL|FAILURE)$ ]]; then
          echo "Invalid status" && exit 1
        fi
        RANDOM_NUMBER=$(($RANDOM%100))
        SUCCESS_RANDOM_GIF=$(curl -s "https://api.giphy.com/v1/gifs/search?api_key=Sd2eln6TYEOPgwar7Jowrd3w9dTL72Q8&q=success&limit=1&offset=${RANDOM_NUMBER}&rating=pg&lang=en")
        SUCCESS_GIPHY=$(echo ${SUCCESS_RANDOM_GIF} | jq -r '.data[0].images.original.url')
        FAILED_RANDOM_GIF=$(curl -s "https://api.giphy.com/v1/gifs/search?api_key=Sd2eln6TYEOPgwar7Jowrd3w9dTL72Q8&q=failure&limit=1&offset=${RANDOM_NUMBER}&rating=pg&lang=en")
        FAILED_GIPHY=$(echo ${FAILED_RANDOM_GIF} | jq -r '.data[0].images.original.url')
        echo "::set-output name=status_message::Success ${{ inputs.success-emoji }}"
        echo "::set-output name=gif::$SUCCESS_GIPHY"
        if [[ ${{ inputs.status }} =~ ^(FAIL|FAILURE)$ ]]; then
          echo "::set-output name=status_message::Failure ${{ inputs.fail-emoji }}"
          echo "::set-output name=gif::$FAILED_GIPHY"
        fi
        commit='*Commit*:'
        branch='*Branch*:'
        author='*Author*:'
        echo "::set-output name=commit_message::$commit\n $(git log -1 --pretty='%s')"
        echo "::set-output name=pr_branch::$branch\n ${{ github.ref_name }}"
        echo "::set-output name=author::$author\n ${{ github.event.head_commit.author.name }}"
        if [[ ${{ github.event_name }} == 'pull_request'  ]]; then
          commit='*PR Title*:'
          branch='*PR Link*:'
          author='*PR Author*:'
          echo "::set-output name=commit_message::$commit\n ${{ github.event.pull_request.title }}"
          echo "::set-output name=pr_branch::$branch\n ${{ github.event.pull_request.html_url }}"
          echo "::set-output name=author::$author\n ${{ github.event.pull_request.user.login }}"
        fi
      shell: bash

    - uses: slackapi/slack-github-action@v1.19.0
      env:
        SLACK_BOT_TOKEN: ${{ inputs.slack-bot-token }}
      with:
        channel-id: ${{ inputs.channel-id }}
        payload: |
              {
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "Build Status: ${{ steps.setup.outputs.status_message }}",
                        "emoji": true
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                    {
                        "type": "mrkdwn",
                        "text": "*Workflow*: ${{ github.workflow }}"
                    }
                    ]
                  },
                  {
                    "type": "section",
                    "fields": [
                        {
                            "type": "mrkdwn",
                            "text": "*Project*:\n${{ github.repository }}"
                        },
                        {
                            "type": "mrkdwn",
                            "text": "${{ steps.setup.outputs.pr_branch }}"
                        },
                        {
                            "type": "mrkdwn",
                            "text": "${{ steps.setup.outputs.commit_message }}"
                        },
                        {
                            "type": "mrkdwn",
                            "text": "${{ steps.setup.outputs.author }}"
                        }
                    ],
                    "accessory": {
                      "type": "image",
                      "image_url": "${{ steps.setup.outputs.gif }}",
                      "alt_text": "${{ inputs.status }}"
                    }
                  },
                  {
                    "type": "actions",
                    "elements": [
                        {
                            "type": "button",
                            "text": {
                                "type": "plain_text",
                                "text": "View Run"
                            },
                            "url": "${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}"
                        }
                    ]
                  }
                ]
              }
    - name: Fail pipeline if FAIL
      if: ${{ inputs.status == 'FAIL' }}
      run: exit 1
      shell: bash
